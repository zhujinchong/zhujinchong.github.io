import{_ as e,o,c as a,Q as i}from"./chunks/framework.2516552c.js";const b=JSON.parse('{"title":"window安装","description":"","frontmatter":{},"headers":[],"relativePath":"articles/全栈/Git/00git教程.md","filePath":"articles/全栈/Git/00git教程.md","lastUpdated":1698165534000}'),t={name:"articles/全栈/Git/00git教程.md"},l=i(`<h1 id="window安装" tabindex="-1">window安装 <a class="header-anchor" href="#window安装" aria-label="Permalink to &quot;window安装&quot;">​</a></h1><p>从官网下载Git: <a href="https://git-scm.com/downloads" target="_blank" rel="noreferrer">https://git-scm.com/downloads</a> 一直默认选项就可以。</p><p>安装完成后，打开git bash窗口，用命令修改配置文件，设置自己主机的名字和email</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git config --global user.name &quot;mingriyingying&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">git config --global user.email &quot;mingriyingying@163.com&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git config --global user.name &quot;mingriyingying&quot;</span></span>
<span class="line"><span style="color:#24292e;">git config --global user.email &quot;mingriyingying@163.com&quot;</span></span></code></pre></div><h1 id="创建本地仓库" tabindex="-1">创建本地仓库 <a class="header-anchor" href="#创建本地仓库" aria-label="Permalink to &quot;创建本地仓库&quot;">​</a></h1><p>创建一个文件夹，在文件夹内打开git bash窗口，输入命令 <code>git init</code>，这个文件夹就变成了本地仓库。</p><p>本地仓库里面会有一个.git的隐藏文件夹，里面存储配置文件等内容。</p><h1 id="本地仓库" tabindex="-1">本地仓库 <a class="header-anchor" href="#本地仓库" aria-label="Permalink to &quot;本地仓库&quot;">​</a></h1><h2 id="提交与回退" tabindex="-1">提交与回退 <a class="header-anchor" href="#提交与回退" aria-label="Permalink to &quot;提交与回退&quot;">​</a></h2><blockquote><p>add表示从本地（工作区）提交到缓存中，commit表示从缓存提交到版本库。提交到版本库就可以记录历史版本。</p></blockquote><p>提交到缓存区：<code>git add readme.txt</code></p><p>提交所有文件到缓存：<code>git add --all</code></p><p>提交到版本库：<code>git commit -m &quot;xxxx&quot;</code></p><p>查看提交日志：<code>git log</code></p><p>回退到上一个版本：<code>git reset --hard HEAD^</code></p><p>回退到上上个版本：<code>git reset --hard HEAD^^</code></p><p>回退到指定版本号：<code>git reset --hard 版本号前x位</code> （版本号通过<code>git log</code>查看）</p><p>查看提交日志：<code>git log</code></p><p>查看最近10条提交日志：<code>git log -10</code></p><h2 id="删除文件" tabindex="-1">删除文件 <a class="header-anchor" href="#删除文件" aria-label="Permalink to &quot;删除文件&quot;">​</a></h2><p>第一步，删除工作区文件：<code>rm test.txt</code></p><p>第二步，删除版本库文件：<code>git rm test.txt</code>，并提交：<code>git commit -m &quot;remove test.txt&quot;</code></p><p>注意：</p><p>如果第一步操作失误，可以挽回，即撤销删除：<code>git checkout -- test.txt</code></p><p>如果已经执行第二步，不能挽回。</p><h1 id="远程仓库" tabindex="-1">远程仓库 <a class="header-anchor" href="#远程仓库" aria-label="Permalink to &quot;远程仓库&quot;">​</a></h1><h2 id="本地仓库添加远程仓库" tabindex="-1">本地仓库添加远程仓库 <a class="header-anchor" href="#本地仓库添加远程仓库" aria-label="Permalink to &quot;本地仓库添加远程仓库&quot;">​</a></h2><p>第一步，登录github，创建一个空仓库，如test。</p><p>第二步，在本地与远程仓库相连，远程仓库一般命名为origin：</p><p><code>git remote add origin git@github.com:michaelliao/test.git</code></p><p>第三步，将本地仓库推送到远程仓库：<code>git push -u origin master</code> （只有第一次需要-u参数）</p><p>第四步，以后本地作了提交，就直接推送到远程仓库：<code>git push origin master</code></p><p>注意：</p><p>当你第一次使用Git的<code>clone</code>或者<code>push</code>命令连接GitHub时，会得到一个警告，输入yes回车就可以。</p><h2 id="从远程仓库克隆到本地" tabindex="-1">从远程仓库克隆到本地 <a class="header-anchor" href="#从远程仓库克隆到本地" aria-label="Permalink to &quot;从远程仓库克隆到本地&quot;">​</a></h2><p>SSH协议传输更快，但是有的公司不支持：</p><p><code>git clone git@github.com:username/test02.git</code></p><p>或者使用https协议传输：</p><p><code>git clone https://github.com/username/test02.git</code></p><h1 id="分支" tabindex="-1">分支 <a class="header-anchor" href="#分支" aria-label="Permalink to &quot;分支&quot;">​</a></h1><h2 id="创建与合并分支" tabindex="-1">创建与合并分支 <a class="header-anchor" href="#创建与合并分支" aria-label="Permalink to &quot;创建与合并分支&quot;">​</a></h2><p>创建分支：<code>git branch dev</code></p><p>切换到分支：<code>git switch dev</code></p><p>查看当前分支：<code>git branch</code></p><p>在当前分支完成内容并提交，并退回到master分支</p><p>合并分支：<code>git merge dev</code></p><p>删除分支：<code>git branch -d dev</code></p><h2 id="分支管理策略" tabindex="-1">分支管理策略 <a class="header-anchor" href="#分支管理策略" aria-label="Permalink to &quot;分支管理策略&quot;">​</a></h2><blockquote><p>上述方式相当于，将master指针指向dev，在合并分支时使用的是Fast forward模式，删除分支后，分支信息会丢掉；</p><p>实际上，我们需要不断在分支做修改，然后master不断做合并，并记录合并的分支信息，此时需要使用另外一种合并模式</p></blockquote><ol><li>在dev分支修改内容并提交</li><li>切换到master</li><li>合并分支：<code>git merge --no-ff -m &quot;merge with no-ff&quot; dev</code></li></ol><h2 id="bug分支" tabindex="-1">Bug分支 <a class="header-anchor" href="#bug分支" aria-label="Permalink to &quot;Bug分支&quot;">​</a></h2><blockquote><p>情景：在dev分支开发时，master有个bug，需要到master修改；修改完毕后，回到dev，把master修改的bug复制下来，然后继续dev开发</p></blockquote><ol><li>正在dev分支开发，master需要修改bug</li><li>将dev开发内容”隐藏“：<code>git stash</code></li><li>切换到master</li><li>在master修改bug，并提交，假设提交id为<code>1023ab</code></li><li>切换到dev</li><li>dev分支复制master的bug：<code>git cherry-pick 1023ab</code></li><li>dev分支回复现场：<code>git stash pop</code></li></ol><h2 id="feature分支" tabindex="-1">Feature分支 <a class="header-anchor" href="#feature分支" aria-label="Permalink to &quot;Feature分支&quot;">​</a></h2><blockquote><p>情景：软件新增一个功能，该功能还未发布，就已经不需要了，此时强制删除就可以</p></blockquote><ol><li>在feature001分支上修改并提交</li><li>切换到master</li><li>删除分支：<code>git branch -d feature001</code>，提示还未合并，删除失败！</li><li>强制删除：<code>git branch -D feature001</code></li></ol><h2 id="多人协作" tabindex="-1">多人协作 <a class="header-anchor" href="#多人协作" aria-label="Permalink to &quot;多人协作&quot;">​</a></h2><blockquote><p>情景：多个人往远程仓库推送，修改同一内容是发生冲突</p></blockquote><ol><li><p>前提：别人已经往远程仓库推送内容</p></li><li><p>推送分支：<code>git push origin dev</code>，发现推送失败，有冲突</p></li><li><p>先把远程分支拉下来：<code>git pull</code></p></li><li><p>如果pull失败，说明本地dev和远程dev没有关联，建立链接：</p><p><code>git branch --set-upstream-to=origin/dev dev</code></p></li><li><p>再pull：<code>git pull</code>，pull成功，但是和本地合并冲突，打开文件修改冲突。</p></li><li><p>解决冲突后提交：<code>git commit -m &quot;fix dev conflict&quot;</code></p></li><li><p>推送：<code>git push origin dev</code></p></li></ol><h2 id="rebase" tabindex="-1">Rebase <a class="header-anchor" href="#rebase" aria-label="Permalink to &quot;Rebase&quot;">​</a></h2><blockquote><p>情景：在我们pull别人提交的时候，本地原本直线的log变成了分叉，不美观，为了不让分叉可以使用rebase</p></blockquote><ol><li>前提：别人已经往远程仓库推送内容</li><li>自己本地完成提交</li><li>先拉去别人内容：<code>git pull</code></li><li>如果有冲突解决冲突，并提交</li><li>此时提交日志分叉，变成直线：<code>git rebase</code></li><li>推送</li></ol><h1 id="标签" tabindex="-1">标签 <a class="header-anchor" href="#标签" aria-label="Permalink to &quot;标签&quot;">​</a></h1><blockquote><p>标签像是指针，指向某个commit</p></blockquote><p>打标签：</p><ol><li>切换到需要打标签的分支：<code>git switch master</code></li><li>打标签：<code>git tag v1.0</code></li><li>查看标签：<code>git tag</code></li><li>给之前提交打标签：<code>git tag v0.9 f52c633</code></li><li>打标签时添加注释：<code>git tag -a v0.8 -m &quot;version 0.8 released&quot; 109ad1</code></li></ol><p>删除标签：</p><ol><li>删除标签：<code>git tag -d v0.8</code></li><li>将标签推送到远程：<code>git push origin v1.0</code></li><li>将所有标签推送到远程：<code>git push origin --tags</code></li><li>删除远程之前，先删除本地：<code>git tag -d v1.0</code></li><li>再删除远程：<code>git push origin :refs/tags/v1.0</code></li></ol><h1 id="自定义别名" tabindex="-1">自定义别名 <a class="header-anchor" href="#自定义别名" aria-label="Permalink to &quot;自定义别名&quot;">​</a></h1><blockquote><p>命令太长记不住，可以自定义别名</p></blockquote><p>带参数的日志，方便查看分支合并情况，解决分支冲突时可以使用：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git config --global alias.lg &quot;log --graph --pretty=oneline --abbrev-commit&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git config --global alias.lg &quot;log --graph --pretty=oneline --abbrev-commit&quot;</span></span></code></pre></div><h1 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h1><ol><li>中国Git托管Gitee（速度更快？）</li><li>忽略特殊文件（避免上传特殊文件）</li><li>搭建Git服务器</li><li>SourceTree可视化工具</li></ol>`,74),c=[l];function d(r,s,p,n,g,h){return o(),a("div",null,c)}const m=e(t,[["render",d]]);export{b as __pageData,m as default};
