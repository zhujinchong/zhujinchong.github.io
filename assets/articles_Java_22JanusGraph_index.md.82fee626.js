import{_ as s,o as a,c as e,Q as n}from"./chunks/framework.2516552c.js";const y=JSON.parse('{"title":"一、GraphDB","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Java/22JanusGraph/index.md","filePath":"articles/Java/22JanusGraph/index.md","lastUpdated":null}'),p={name:"articles/Java/22JanusGraph/index.md"},l=n(`<blockquote><p>图库介绍 <a href="https://www.jianshu.com/nb/45863218" target="_blank" rel="noreferrer">https://www.jianshu.com/nb/45863218</a></p></blockquote><h1 id="一、graphdb" tabindex="-1">一、GraphDB <a class="header-anchor" href="#一、graphdb" aria-label="Permalink to &quot;一、GraphDB&quot;">​</a></h1><h2 id="_1-introduction" tabindex="-1">1. Introduction <a class="header-anchor" href="#_1-introduction" aria-label="Permalink to &quot;1. Introduction&quot;">​</a></h2><p>图数据库就是用来存储图结构的数据库。一般的关系型数据库都可以存储图结构，但对于复杂的关系模型，比如微信用户关系网模型构建分析，关系型数据库就显的力不从心。图数据库就是为了解决这类复杂的关系问题而产生的。</p><p>NoSQL数据库分类：</p><ul><li>键值对(key-value)数据库：如Memcache，Redis</li><li>列簇式数据库：如HBase</li><li>文档型数据库：如Mongodb</li><li>图数据库：如Neo4j，JanusGraph</li></ul><p>JanusGraph是一个开源的、分布式的、以集群形式存储百亿节点的图数据库。特点：</p><ul><li>后端数据存储多种选择：Hbase, Cassandra, Google Bigtable等</li><li>可利用外部如ES, Solr, Lucene等，实现全量文档的搜索功能</li><li>满足实时的复杂图遍历、满足ACID一致性的OLTP</li><li>基于spark + hadoop的OLAP</li><li>使用Gremlin语言查询，与Apache TinkerPop项目兼容</li></ul><p>图查询和图计算都是对图的遍历。图数据库主要提供两种与遍历图的方式：OLTP （Online Transaction Processing）和 OLAP （Online Analytical Processing）。</p><ul><li>OLTP联机事务处理 / 图查询；实时返回，涉及少量数据，随机的数据访问，串行运行，用于查询，偏向深度优先的计算引擎，不需要太大的内存；和关系数据库一样，要保证ACID一致性。</li><li>OLAP联机分析处理 / 图计算：长时间运行，涉及几乎整个图，串行地访问数据，并行运行，批量处理，偏向广度优先的计算引擎，需要更大的内存；可以和大数据技术看作一类。</li><li>图查询指支持对图数据模型的增、删、改、查（CRUD）方法，更关注 OLTP。有的图数据库也继承了少量的图计算能力，但真正的大型系统还是需要单独的计算框架。</li></ul><h2 id="_2-graphdb-comparison" tabindex="-1">2. GraphDB Comparison <a class="header-anchor" href="#_2-graphdb-comparison" aria-label="Permalink to &quot;2. GraphDB Comparison&quot;">​</a></h2><table><thead><tr><th></th><th>Neo4j</th><th>JanusGraph</th><th>HugeGraph</th></tr></thead><tbody><tr><td>开源</td><td>社区版开源</td><td>开源，兼容Apache Tinkerpop生态</td><td>开源，兼容Apache Tinkerpop生态（时是百度的开源图库）</td></tr><tr><td>图查询语言</td><td>Cypher</td><td>Gremlin</td><td>Gremlin</td></tr><tr><td>支持数据规模</td><td>社区版十亿级</td><td>百亿以上</td><td>千亿以上</td></tr><tr><td>大规模数据写入功能</td><td>在线导入慢，脱机导入快</td><td>较慢</td><td>在线导入快</td></tr><tr><td>大规模数据查询性能</td><td>快</td><td>较快，不稳定</td><td>快，稳定</td></tr><tr><td>Feature迭代速度</td><td>趋于完善，新功能上线较慢</td><td>较少迭代</td><td>百度自研，2016年启动，更新快</td></tr><tr><td>扩展性</td><td>无法扩展</td><td>可扩展</td><td>可扩展</td></tr><tr><td>内置常用图算法</td><td>提供了丰富的基本图算法</td><td>无</td><td>内置提供了基本的图算法</td></tr><tr><td>支持图计算平台集成</td><td>不支持</td><td>支持Spark GraphX等</td><td>支持Spark GraphX</td></tr></tbody></table><h1 id="二、janusgraph" tabindex="-1">二、JanusGraph <a class="header-anchor" href="#二、janusgraph" aria-label="Permalink to &quot;二、JanusGraph&quot;">​</a></h1><h2 id="_1-janusgraph-tinkerpop-gremlin" tabindex="-1">1. JanusGraph &amp; Tinkerpop &amp; Gremlin <a class="header-anchor" href="#_1-janusgraph-tinkerpop-gremlin" aria-label="Permalink to &quot;1. JanusGraph &amp; Tinkerpop &amp; Gremlin&quot;">​</a></h2><p><strong>Tinkerpop</strong>是Apache基金会下的一个开源的图数据库与图计算框架（OLTP与OLAP）。</p><p><strong>Gremlin</strong>是Tinkerpop的一个组件，它是一门路径导向语言，用于图操作和图遍历（也称查询语言）。Gremlin Console 和 Gremlin Server 分别提供了控制台和远程执行Gremlin查询语言的方式。Gremlin Server 在 JanusGraph 中被成为 JanusGraph Server。</p><p><strong>JanusGraph</strong>是基于Tinkerpop这个框架来开发的，使用的查询语言也是Gremlin。</p><h2 id="_2-download-install" tabindex="-1">2. Download &amp; Install <a class="header-anchor" href="#_2-download-install" aria-label="Permalink to &quot;2. Download &amp; Install&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">1. 从git下载 https://github.com/JanusGraph/janusgraph/releases</span></span>
<span class="line"><span style="color:#e1e4e8;">	janusgraph-full-0.5.2.zip</span></span>
<span class="line"><span style="color:#e1e4e8;">2. 解压即用</span></span>
<span class="line"><span style="color:#e1e4e8;">	unzip janusgraph-full-0.5.2.zip</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">1. 从git下载 https://github.com/JanusGraph/janusgraph/releases</span></span>
<span class="line"><span style="color:#24292e;">	janusgraph-full-0.5.2.zip</span></span>
<span class="line"><span style="color:#24292e;">2. 解压即用</span></span>
<span class="line"><span style="color:#24292e;">	unzip janusgraph-full-0.5.2.zip</span></span></code></pre></div><h2 id="_3-interactions" tabindex="-1">3. Interactions <a class="header-anchor" href="#_3-interactions" aria-label="Permalink to &quot;3. Interactions&quot;">​</a></h2><p>JanusGraph本身就是一组没有执行线程的jar文件。连接和使用JanusGraph数据库有两种基本模式(JanusGraph Embedded、JanusGraph Server)和交互式Shell（Gremlin Console）方式</p><p><strong>JanusGraph Embedded</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">写在程序里，当lib引入。JanusGraph 作为应用程序的一部分，执行Gremlin，查询同一JVM中的图库。查询执行、JanusGraph缓存和事务处理均发生于此JVM。存储后端，即数据的来源，可能是本地库或远程库。当数据模型大时，很容易OOM，并且耦合性太高，生产上一般不这么搞。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">写在程序里，当lib引入。JanusGraph 作为应用程序的一部分，执行Gremlin，查询同一JVM中的图库。查询执行、JanusGraph缓存和事务处理均发生于此JVM。存储后端，即数据的来源，可能是本地库或远程库。当数据模型大时，很容易OOM，并且耦合性太高，生产上一般不这么搞。</span></span></code></pre></div><p><strong>JanusGraph Server</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">机器上长期运行的服务器进程，允许远程客户端或运行在程序中的逻辑进行JanusGraph调用。提交Gremlin查询到服务器，与JanusGraph实例交互。JanusGraph原生支持Apache TinkerPop的Gremlin Server。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">// 1. 编辑conf/gremlin-server/gremlin-server.yaml</span></span>
<span class="line"><span style="color:#e1e4e8;">graphs: {</span></span>
<span class="line"><span style="color:#e1e4e8;">  graph: conf/gremlin-server/janusgraph-berkeleyje-es.properties</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span>
<span class="line"><span style="color:#e1e4e8;">// 2. 将配置配好conf/gremlin-server/janusgraph-berkeleyje-es.properties</span></span>
<span class="line"><span style="color:#e1e4e8;">gremlin.graph=org.janusgraph.core.JanusGraphFactory  #默认 指明gremlin服务器使用的图工厂实现</span></span>
<span class="line"><span style="color:#e1e4e8;">storage.backend=berkeleyje  #默认 后端存储BerkeleyDB</span></span>
<span class="line"><span style="color:#e1e4e8;">storage.directory=db/berkeley  #默认 后端存储数据目录</span></span>
<span class="line"><span style="color:#e1e4e8;">index.search.backend=elasticsearch  #默认 后端索引ES</span></span>
<span class="line"><span style="color:#e1e4e8;">index.search.hostname=192.168.200.101,192.168.200.102,192.168.200.103  #自己配 后端索引主机</span></span>
<span class="line"><span style="color:#e1e4e8;">// 3. 后台启动</span></span>
<span class="line"><span style="color:#e1e4e8;">nohup sh bin/gremlin-server.sh conf/gremlin-server/gremlin-server.yaml &gt; /dev/null &amp;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">机器上长期运行的服务器进程，允许远程客户端或运行在程序中的逻辑进行JanusGraph调用。提交Gremlin查询到服务器，与JanusGraph实例交互。JanusGraph原生支持Apache TinkerPop的Gremlin Server。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">// 1. 编辑conf/gremlin-server/gremlin-server.yaml</span></span>
<span class="line"><span style="color:#24292e;">graphs: {</span></span>
<span class="line"><span style="color:#24292e;">  graph: conf/gremlin-server/janusgraph-berkeleyje-es.properties</span></span>
<span class="line"><span style="color:#24292e;">}</span></span>
<span class="line"><span style="color:#24292e;">// 2. 将配置配好conf/gremlin-server/janusgraph-berkeleyje-es.properties</span></span>
<span class="line"><span style="color:#24292e;">gremlin.graph=org.janusgraph.core.JanusGraphFactory  #默认 指明gremlin服务器使用的图工厂实现</span></span>
<span class="line"><span style="color:#24292e;">storage.backend=berkeleyje  #默认 后端存储BerkeleyDB</span></span>
<span class="line"><span style="color:#24292e;">storage.directory=db/berkeley  #默认 后端存储数据目录</span></span>
<span class="line"><span style="color:#24292e;">index.search.backend=elasticsearch  #默认 后端索引ES</span></span>
<span class="line"><span style="color:#24292e;">index.search.hostname=192.168.200.101,192.168.200.102,192.168.200.103  #自己配 后端索引主机</span></span>
<span class="line"><span style="color:#24292e;">// 3. 后台启动</span></span>
<span class="line"><span style="color:#24292e;">nohup sh bin/gremlin-server.sh conf/gremlin-server/gremlin-server.yaml &gt; /dev/null &amp;</span></span></code></pre></div><p><strong>Gremlin Console</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Gremlin控制台是一个REPL（即交互式shell），与JanusGraph一起打包，可以通过控制台进行JanusGraph 图库的创建（连接）、查询等操作。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">本地数据库</span></span>
<span class="line"><span style="color:#e1e4e8;">    // 前提：已部署好es（看别人）</span></span>
<span class="line"><span style="color:#e1e4e8;">    // 1. 配置es</span></span>
<span class="line"><span style="color:#e1e4e8;">    vim conf/janusgraph-berkeleyje-es.properties</span></span>
<span class="line"><span style="color:#e1e4e8;">    // 2. 启动</span></span>
<span class="line"><span style="color:#e1e4e8;">    sh bin/gremlin.sh</span></span>
<span class="line"><span style="color:#e1e4e8;">    // 3. JanusGrphaFactory提供了一组静态方法，通过配置文件作为参数来获取graph实例</span></span>
<span class="line"><span style="color:#e1e4e8;">    graph = JanusGraphFactory.open(&#39;conf/janusgraph-berkeleyje-es.properties&#39;)</span></span>
<span class="line"><span style="color:#e1e4e8;">    // 4. 获取图的遍历对象</span></span>
<span class="line"><span style="color:#e1e4e8;">    g = graph.traversal()</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">远程数据库</span></span>
<span class="line"><span style="color:#e1e4e8;">	// 1. 修改配置conf/remote.yaml</span></span>
<span class="line"><span style="color:#e1e4e8;">	hosts: [localhost]</span></span>
<span class="line"><span style="color:#e1e4e8;">	port: 8182</span></span>
<span class="line"><span style="color:#e1e4e8;">	// 2. 启动</span></span>
<span class="line"><span style="color:#e1e4e8;">	sh bin/gremlin.sh</span></span>
<span class="line"><span style="color:#e1e4e8;">	// 3. 连接远程</span></span>
<span class="line"><span style="color:#e1e4e8;">	:remote connect tinkerpop.server conf/remote.yaml</span></span>
<span class="line"><span style="color:#e1e4e8;">	// 4. 查询 :&gt; 表示操作的远程</span></span>
<span class="line"><span style="color:#e1e4e8;">	:&gt; g.V().count()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Gremlin控制台是一个REPL（即交互式shell），与JanusGraph一起打包，可以通过控制台进行JanusGraph 图库的创建（连接）、查询等操作。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">本地数据库</span></span>
<span class="line"><span style="color:#24292e;">    // 前提：已部署好es（看别人）</span></span>
<span class="line"><span style="color:#24292e;">    // 1. 配置es</span></span>
<span class="line"><span style="color:#24292e;">    vim conf/janusgraph-berkeleyje-es.properties</span></span>
<span class="line"><span style="color:#24292e;">    // 2. 启动</span></span>
<span class="line"><span style="color:#24292e;">    sh bin/gremlin.sh</span></span>
<span class="line"><span style="color:#24292e;">    // 3. JanusGrphaFactory提供了一组静态方法，通过配置文件作为参数来获取graph实例</span></span>
<span class="line"><span style="color:#24292e;">    graph = JanusGraphFactory.open(&#39;conf/janusgraph-berkeleyje-es.properties&#39;)</span></span>
<span class="line"><span style="color:#24292e;">    // 4. 获取图的遍历对象</span></span>
<span class="line"><span style="color:#24292e;">    g = graph.traversal()</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">远程数据库</span></span>
<span class="line"><span style="color:#24292e;">	// 1. 修改配置conf/remote.yaml</span></span>
<span class="line"><span style="color:#24292e;">	hosts: [localhost]</span></span>
<span class="line"><span style="color:#24292e;">	port: 8182</span></span>
<span class="line"><span style="color:#24292e;">	// 2. 启动</span></span>
<span class="line"><span style="color:#24292e;">	sh bin/gremlin.sh</span></span>
<span class="line"><span style="color:#24292e;">	// 3. 连接远程</span></span>
<span class="line"><span style="color:#24292e;">	:remote connect tinkerpop.server conf/remote.yaml</span></span>
<span class="line"><span style="color:#24292e;">	// 4. 查询 :&gt; 表示操作的远程</span></span>
<span class="line"><span style="color:#24292e;">	:&gt; g.V().count()</span></span></code></pre></div><h2 id="_3-benefits" tabindex="-1">3. Benefits <a class="header-anchor" href="#_3-benefits" aria-label="Permalink to &quot;3. Benefits&quot;">​</a></h2><p>特点概述：</p><ol><li>分布式部署，支持集群。</li><li>可以存储大图，比如包含数千亿Vertices和edges的图。</li><li>支持数千用户实时、并发访问。</li><li>集群节点可以线性扩展，以支持更大的图和更多的并发访问用户。</li><li>数据分布式存储，支持各种后端存储系统。</li><li>通过集成大数据平台Spark Hadoop等，支持全局图数据分析、报表</li><li>通过集成ES Lucene等，支持全文搜索</li><li>原生集成Apache Tinkerpop图技术栈。包括Gremlin graph query language, Gremlin graph server等。</li><li>支持各种可视化工具。</li></ol><p><strong>可扩展</strong></p><ul><li>弹性和线性可扩展性，可用于不断增长的数据和用户群</li><li>数据分发和复制以提高性能和容错能力</li><li>多数据中心高可用性和热备份</li></ul><p><strong>开源</strong></p><p>所有功能 都是完全免费的。无需购买商业许可证。JanusGraph在Apache 2许可下完全开放源代码。</p><p><strong>事务</strong></p><p>JanusGraph是一个事务数据库，可以支持数千个并发用户实时执行复杂的图遍历。支持ACID和最终的一致性。</p><p><strong>数据存储</strong></p><p>图数据可以存储在：</p><ul><li>Apache Cassandra - 注重在AP上</li><li>Apache HBase - 注重在CP上</li><li>Oracle BerkeleyDB - 一般用于单机本地验证</li></ul><p><strong>检索</strong></p><p>全文搜索等高级搜索功能可以通过以下方式支持</p><ul><li>Elasticsearch - 使用最多</li><li>Apache Solr</li><li>Apache Lucene</li></ul><p><strong>分析</strong></p><p>除了在线事务处理（OLTP）之外，JanusGraph的Apache Spark集成还支持全局图分析（OLAP）。</p><p><strong>TinkerPop</strong></p><p>与 Apache TinkerPop 图栈的本地集成：</p><ul><li>Gremlin graph query language</li><li>Gremlin Server</li><li>Gremlin Console</li></ul><p><strong>适配器</strong></p><p>JanusGraph有不同的第三方存储适配器：</p><ul><li>Aerospike</li><li>DynamoDB</li><li>FoundationDB</li></ul><p><strong>可视化</strong></p><p>JanusGraph支持各种可视化工具，例如Arcade Analytics、Cytoscape、Apache TinkerPop的Gephi插件、Graphexp、Cambridge Intelligence的Key Lines、Linkurious、Tom Sawyer。</p><h1 id="三、architectural" tabindex="-1">三、Architectural <a class="header-anchor" href="#三、architectural" aria-label="Permalink to &quot;三、Architectural&quot;">​</a></h1><p><img src="https://upload-images.jianshu.io/upload_images/22933483-12f3b310be98fede.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1010/format/webp" alt="img"></p><h2 id="indices" tabindex="-1">Indices <a class="header-anchor" href="#indices" aria-label="Permalink to &quot;Indices&quot;">​</a></h2><blockquote><p>JanusGraph中有两种索引：图索引（Graph Index）和 以顶点为中心的索引（Vertex-centric Indexes）</p></blockquote><p>图索引支持过滤索引，就是仅在满足特定条件的边或点建立索引。其中又包括复合索引（Composite Index）和混合索引（Mixed Index）</p><p>复合索引不依赖索引后端，仅依赖存储后端。复合索引只能等值查询，也就是说如果只包含部分键的查询都无法走复合索引。如Hbase，将索引的值做一个hash，然后分段存储在多个region server，这样就可以避免查询热点。</p><p>混合索引相当于关系型数据库中的常规索引，比复合索引更灵活，其依赖索引后端。混合索引支持全文索引，地理位置索引，范围查询等，默认创建的是全文索引类型。</p><h2 id="transactional" tabindex="-1">Transactional <a class="header-anchor" href="#transactional" aria-label="Permalink to &quot;Transactional&quot;">​</a></h2><p>JanusGraph中的事务是自动开启的，但不会自动commit或rollback。所有的读写操作都是在事务中执行。</p><p>JanusGraph采用乐观事务模型，在提交时才会进行冲突检测。</p><h1 id="四、gremlin-query-language" tabindex="-1">四、Gremlin Query Language <a class="header-anchor" href="#四、gremlin-query-language" aria-label="Permalink to &quot;四、Gremlin Query Language&quot;">​</a></h1><h2 id="_1-query" tabindex="-1">1. Query <a class="header-anchor" href="#_1-query" aria-label="Permalink to &quot;1. Query&quot;">​</a></h2><p>开启本地JanusGraph</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">./gremlin.sh</span></span>
<span class="line"><span style="color:#e1e4e8;">graph = JanusGraphFactory.open(&#39;conf/janusgraph-berkeleyje-es.properties&#39;)</span></span>
<span class="line"><span style="color:#e1e4e8;">g = graph.traversal()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">./gremlin.sh</span></span>
<span class="line"><span style="color:#24292e;">graph = JanusGraphFactory.open(&#39;conf/janusgraph-berkeleyje-es.properties&#39;)</span></span>
<span class="line"><span style="color:#24292e;">g = graph.traversal()</span></span></code></pre></div><p>查询所有节点 / 查询边</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">g.V().limit(3)</span></span>
<span class="line"><span style="color:#e1e4e8;">g.E().limit(3)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">g.V().limit(3)</span></span>
<span class="line"><span style="color:#24292e;">g.E().limit(3)</span></span></code></pre></div><p>根据id查询节点上的详细信息</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">g.V(4096).valueMap()</span></span>
<span class="line"><span style="color:#e1e4e8;">g.E(&#39;4cl-6co-9hx-39k&#39;).valueMap()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">g.V(4096).valueMap()</span></span>
<span class="line"><span style="color:#24292e;">g.E(&#39;4cl-6co-9hx-39k&#39;).valueMap()</span></span></code></pre></div><p>查询标签 / 属性</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">g.V(4096).label()</span></span>
<span class="line"><span style="color:#e1e4e8;">g.V(4096).properites()</span></span>
<span class="line"><span style="color:#e1e4e8;">g.E(&#39;4cl-6co-9hx-39k&#39;).label()</span></span>
<span class="line"><span style="color:#e1e4e8;">g.E(&#39;4cl-6co-9hx-39k&#39;).properites()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">g.V(4096).label()</span></span>
<span class="line"><span style="color:#24292e;">g.V(4096).properites()</span></span>
<span class="line"><span style="color:#24292e;">g.E(&#39;4cl-6co-9hx-39k&#39;).label()</span></span>
<span class="line"><span style="color:#24292e;">g.E(&#39;4cl-6co-9hx-39k&#39;).properites()</span></span></code></pre></div><p>根据属性的key查询value (标签没有value)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">g.V(4096).values(&#39;name&#39;)</span></span>
<span class="line"><span style="color:#e1e4e8;">g.V(4096).properties(&#39;name&#39;).value()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">g.V(4096).values(&#39;name&#39;)</span></span>
<span class="line"><span style="color:#24292e;">g.V(4096).properties(&#39;name&#39;).value()</span></span></code></pre></div><p>查询路径</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">// 从一个节点出发，查询出边、进边、所有边</span></span>
<span class="line"><span style="color:#e1e4e8;">g.V(4096).outE().limit(10)</span></span>
<span class="line"><span style="color:#e1e4e8;">g.V(4096).inE().limit(10)</span></span>
<span class="line"><span style="color:#e1e4e8;">g.V(4096).bothE().limit(10)</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">// 从一个节点出发，查询该节点出边的另一端节点 （path显示出节点、边）</span></span>
<span class="line"><span style="color:#e1e4e8;">g.V(4096).outE().otherV().valueMap().limit(3)</span></span>
<span class="line"><span style="color:#e1e4e8;">g.V(4096).outE().otherV().path().limit(3)</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">// 使用by()语句使查询结果更直观</span></span>
<span class="line"><span style="color:#e1e4e8;">g.V(4096).outE().otherV().path().by(&#39;name&#39;).by(label).by(&#39;name&#39;).limit(3)</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">// 使用simplePath去掉回路，使用cyclicPath筛选出回路</span></span>
<span class="line"><span style="color:#e1e4e8;">g.V(4096).outE().otherV().path().simplePath().limit(3)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">// 从一个节点出发，查询出边、进边、所有边</span></span>
<span class="line"><span style="color:#24292e;">g.V(4096).outE().limit(10)</span></span>
<span class="line"><span style="color:#24292e;">g.V(4096).inE().limit(10)</span></span>
<span class="line"><span style="color:#24292e;">g.V(4096).bothE().limit(10)</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">// 从一个节点出发，查询该节点出边的另一端节点 （path显示出节点、边）</span></span>
<span class="line"><span style="color:#24292e;">g.V(4096).outE().otherV().valueMap().limit(3)</span></span>
<span class="line"><span style="color:#24292e;">g.V(4096).outE().otherV().path().limit(3)</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">// 使用by()语句使查询结果更直观</span></span>
<span class="line"><span style="color:#24292e;">g.V(4096).outE().otherV().path().by(&#39;name&#39;).by(label).by(&#39;name&#39;).limit(3)</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">// 使用simplePath去掉回路，使用cyclicPath筛选出回路</span></span>
<span class="line"><span style="color:#24292e;">g.V(4096).outE().otherV().path().simplePath().limit(3)</span></span></code></pre></div><p>过滤 / 条件查询</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">g.V().hasLabel(&#39;god&#39;).valueMap()</span></span>
<span class="line"><span style="color:#e1e4e8;">// 等值</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">g.V().hasLabel(&#39;god&#39;).valueMap()</span></span>
<span class="line"><span style="color:#24292e;">// 等值</span></span></code></pre></div><p>终止操作</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">next(n)  // 展示n个</span></span>
<span class="line"><span style="color:#e1e4e8;">label()</span></span>
<span class="line"><span style="color:#e1e4e8;">values()</span></span>
<span class="line"><span style="color:#e1e4e8;">valueMap()</span></span>
<span class="line"><span style="color:#e1e4e8;">toList()</span></span>
<span class="line"><span style="color:#e1e4e8;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">next(n)  // 展示n个</span></span>
<span class="line"><span style="color:#24292e;">label()</span></span>
<span class="line"><span style="color:#24292e;">values()</span></span>
<span class="line"><span style="color:#24292e;">valueMap()</span></span>
<span class="line"><span style="color:#24292e;">toList()</span></span>
<span class="line"><span style="color:#24292e;">...</span></span></code></pre></div><h2 id="_2-create-schema" tabindex="-1">2. Create Schema <a class="header-anchor" href="#_2-create-schema" aria-label="Permalink to &quot;2. Create Schema&quot;">​</a></h2><p>schema相当于关系型数据库中的表结构</p><p>开启本地JanusGraph</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">./gremlin.sh</span></span>
<span class="line"><span style="color:#e1e4e8;">graph = JanusGraphFactory.open(&#39;conf/janusgraph-berkeleyje-es.properties&#39;)</span></span>
<span class="line"><span style="color:#e1e4e8;">g = graph.traversal()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">./gremlin.sh</span></span>
<span class="line"><span style="color:#24292e;">graph = JanusGraphFactory.open(&#39;conf/janusgraph-berkeleyje-es.properties&#39;)</span></span>
<span class="line"><span style="color:#24292e;">g = graph.traversal()</span></span></code></pre></div><p>创建一个新的顶点标签 和 边标签</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">mgmt = graph.openManagement()</span></span>
<span class="line"><span style="color:#e1e4e8;">animal = mgmt.makeVertexLabel(&#39;animal&#39;).make()</span></span>
<span class="line"><span style="color:#e1e4e8;">friend = mgmt.makeEdgeLabel(&#39;friend&#39;).multiplicity(MULTI).make()</span></span>
<span class="line"><span style="color:#e1e4e8;">mgmt.commit()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">mgmt = graph.openManagement()</span></span>
<span class="line"><span style="color:#24292e;">animal = mgmt.makeVertexLabel(&#39;animal&#39;).make()</span></span>
<span class="line"><span style="color:#24292e;">friend = mgmt.makeEdgeLabel(&#39;friend&#39;).multiplicity(MULTI).make()</span></span>
<span class="line"><span style="color:#24292e;">mgmt.commit()</span></span></code></pre></div><h2 id="_3-insert-delete" tabindex="-1">3. Insert &amp; Delete <a class="header-anchor" href="#_3-insert-delete" aria-label="Permalink to &quot;3. Insert &amp; Delete&quot;">​</a></h2><p>开启本地JanusGraph</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">./gremlin.sh</span></span>
<span class="line"><span style="color:#e1e4e8;">graph = JanusGraphFactory.open(&#39;conf/janusgraph-berkeleyje-es.properties&#39;)</span></span>
<span class="line"><span style="color:#e1e4e8;">g = graph.traversal()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">./gremlin.sh</span></span>
<span class="line"><span style="color:#24292e;">graph = JanusGraphFactory.open(&#39;conf/janusgraph-berkeleyje-es.properties&#39;)</span></span>
<span class="line"><span style="color:#24292e;">g = graph.traversal()</span></span></code></pre></div><p>插入并查询</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">tom = graph.addVertex(&#39;human&#39;)</span></span>
<span class="line"><span style="color:#e1e4e8;">tom.property(&#39;name&#39;, &#39;Tom&#39;)</span></span>
<span class="line"><span style="color:#e1e4e8;">cat = graph.addVertex(&#39;human&#39;)</span></span>
<span class="line"><span style="color:#e1e4e8;">cat.property(&#39;name&#39;, &#39;Cat&#39;)</span></span>
<span class="line"><span style="color:#e1e4e8;">g.V().hasLabel(&#39;human&#39;).out(&#39;battled&#39;).path().by(&#39;name&#39;).by(&#39;name&#39;)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">tom = graph.addVertex(&#39;human&#39;)</span></span>
<span class="line"><span style="color:#24292e;">tom.property(&#39;name&#39;, &#39;Tom&#39;)</span></span>
<span class="line"><span style="color:#24292e;">cat = graph.addVertex(&#39;human&#39;)</span></span>
<span class="line"><span style="color:#24292e;">cat.property(&#39;name&#39;, &#39;Cat&#39;)</span></span>
<span class="line"><span style="color:#24292e;">g.V().hasLabel(&#39;human&#39;).out(&#39;battled&#39;).path().by(&#39;name&#39;).by(&#39;name&#39;)</span></span></code></pre></div><p>修改</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">g.V().has(&#39;human&#39;, &#39;name&#39;, &#39;Tom&#39;).property(&#39;age&#39;, &#39;50&#39;)</span></span>
<span class="line"><span style="color:#e1e4e8;">g.V().has(&#39;human&#39;, &#39;name&#39;, &#39;Tom&#39;).valueMap()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">g.V().has(&#39;human&#39;, &#39;name&#39;, &#39;Tom&#39;).property(&#39;age&#39;, &#39;50&#39;)</span></span>
<span class="line"><span style="color:#24292e;">g.V().has(&#39;human&#39;, &#39;name&#39;, &#39;Tom&#39;).valueMap()</span></span></code></pre></div><p>删除</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">g.V().has(&#39;human&#39;, &#39;name&#39;, &#39;Tom&#39;).drop()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">g.V().has(&#39;human&#39;, &#39;name&#39;, &#39;Tom&#39;).drop()</span></span></code></pre></div>`,95),o=[l];function r(t,i,c,h,d,g){return a(),e("div",null,o)}const m=s(p,[["render",r]]);export{y as __pageData,m as default};
