import{_ as s,o as a,c as e,Q as n}from"./chunks/framework.2516552c.js";const p="/assets/image-20230319172755855.ca4a6eb9.png",l="/assets/image-20230319185947771.6d98b8f3.png",o="/assets/image-20230319190147058.216cb9a0.png",i="/assets/image-20230319191314246.2c783a21.png",t="/assets/image-20230319191507250.bf78f9cb.png",c="/assets/image-20230319192334414.05ddc4fb.png",r="/assets/image-20230319192828298.aaaefe67.png",d="/assets/image-20230319193702490.019d7138.png",g="/assets/image-20230319193510089.0e9e0ede.png",h="/assets/image-20230319204258848.6eb157ea.png",u="/assets/image-20230319204752520.15682c19.png",m="/assets/image-20230319205142239.e21db55d.png",y="/assets/image-20230319210546979.fa492259.png",k="/assets/image-20230319221146529.e71d0cf1.png",b="/assets/image-20230319224651661.e9e02308.png",v="/assets/image-20230319225958981.313d9542.png",f="/assets/image-20230320222442031.e1f94541.png",q="/assets/image-20230320224249259.529b13b8.png",_="/assets/image-20230320230349278.ffd042b0.png",j="/assets/image-20230320231239267.9d4d62db.png",x="/assets/image-20230320232050611.06befa3c.png",P="/assets/image-20230320235543233.7c0e3897.png",E="/assets/image-20230320235349552.2fd2a680.png",F=JSON.parse('{"title":"Jenkins","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Java/66jenkins/index.md","filePath":"articles/Java/66jenkins/index.md","lastUpdated":1698149129000}'),C={name:"articles/Java/66jenkins/index.md"},S=n(`<h1 id="jenkins" tabindex="-1">Jenkins <a class="header-anchor" href="#jenkins" aria-label="Permalink to &quot;Jenkins&quot;">​</a></h1><p>Jenkins，原名 Hudson，2011 年改为现在的名字。它是一个开源的实现持续集成的软件工具。</p><p>官方网站 <a href="https://www.jenkins.io/" target="_blank" rel="noreferrer">https://www.jenkins.io/</a></p><h2 id="一、linux环境安装" tabindex="-1">一、Linux环境安装 <a class="header-anchor" href="#一、linux环境安装" aria-label="Permalink to &quot;一、Linux环境安装&quot;">​</a></h2><h3 id="安装jdk" tabindex="-1">安装JDK <a class="header-anchor" href="#安装jdk" aria-label="Permalink to &quot;安装JDK&quot;">​</a></h3><p>略。</p><h3 id="安装jenkens" tabindex="-1">安装Jenkens <a class="header-anchor" href="#安装jenkens" aria-label="Permalink to &quot;安装Jenkens&quot;">​</a></h3><p>官方文档介绍非常详细 <a href="https://www.jenkins.io" target="_blank" rel="noreferrer">https://www.jenkins.io</a></p><p>下载war包，直接启动：（初始化时间需要几分钟）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">java -jar jenkens.war</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">java -jar jenkens.war</span></span></code></pre></div><p>启动时，会将初始化的密码输出：（直接复制，或者去配置文件复制）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Jenkins initial setup is required. An admin user has been created and a password generated.</span></span>
<span class="line"><span style="color:#e1e4e8;">Please use the following password to proceed to installation:</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">4e67bbe261da476abdc63c5b51311646</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">This may also be found at: /root/.jenkins/secrets/initialAdminPassword</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Jenkins initial setup is required. An admin user has been created and a password generated.</span></span>
<span class="line"><span style="color:#24292e;">Please use the following password to proceed to installation:</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">4e67bbe261da476abdc63c5b51311646</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">This may also be found at: /root/.jenkins/secrets/initialAdminPassword</span></span></code></pre></div><p>访问IP:8080登录jenkens，并修改admin密码</p><p><strong>注意：jenkins默认端口是8080，所以后面项目端口不要和它重复了</strong></p><h3 id="安装maven" tabindex="-1">安装Maven <a class="header-anchor" href="#安装maven" aria-label="Permalink to &quot;安装Maven&quot;">​</a></h3><p>官网 <a href="https://maven.apache.org/" target="_blank" rel="noreferrer">https://maven.apache.org/</a></p><p>下载后复制到Jenkins所在服务器解压缩即可，进入bin目录，查看版本号</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">./mvn -v</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">./mvn -v</span></span></code></pre></div><p>配置maven环境变量</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">vim /etc/profile</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">export MAVEN_HOME=/usr/local/maven/apache-maven-3.3.9</span></span>
<span class="line"><span style="color:#e1e4e8;">export PATH=\${PATH}:\${MAVEN_HOME}/bin</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">vim /etc/profile</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">export MAVEN_HOME=/usr/local/maven/apache-maven-3.3.9</span></span>
<span class="line"><span style="color:#24292e;">export PATH=\${PATH}:\${MAVEN_HOME}/bin</span></span></code></pre></div><p>刷新配置文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">source /etc/profile</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">source /etc/profile</span></span></code></pre></div><p>创建maven本地仓库</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">mkdir maven_repository</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">mkdir maven_repository</span></span></code></pre></div><p>在setting.xml配置本地仓库，和国内镜像源</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">vi apache-maven-3.8.6/conf/settings.xml</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;!--本地仓库目录--&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;localRepository&gt;/opt/software/maven/maven_repository&lt;/localRepository&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;!--阿里云镜像（先注释中央仓库地址）--&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;mirror&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">  &lt;id&gt;alimaven&lt;/id&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">  &lt;name&gt;aliyun maven&lt;/name&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">  &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        </span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;/mirror&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">vi apache-maven-3.8.6/conf/settings.xml</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">&lt;!--本地仓库目录--&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;localRepository&gt;/opt/software/maven/maven_repository&lt;/localRepository&gt;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">&lt;!--阿里云镜像（先注释中央仓库地址）--&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;mirror&gt;</span></span>
<span class="line"><span style="color:#24292e;">  &lt;id&gt;alimaven&lt;/id&gt;</span></span>
<span class="line"><span style="color:#24292e;">  &lt;name&gt;aliyun maven&lt;/name&gt;</span></span>
<span class="line"><span style="color:#24292e;">  &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span></span>
<span class="line"><span style="color:#24292e;">  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        </span></span>
<span class="line"><span style="color:#24292e;">&lt;/mirror&gt;</span></span></code></pre></div><p>测试</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">mvn -v</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">mvn -v</span></span></code></pre></div><h3 id="安装git" tabindex="-1">安装git <a class="header-anchor" href="#安装git" aria-label="Permalink to &quot;安装git&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">yum install git</span></span>
<span class="line"><span style="color:#e1e4e8;">git --version</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">yum install git</span></span>
<span class="line"><span style="color:#24292e;">git --version</span></span></code></pre></div><h2 id="二、jenkins-maven-gitee持续集成" tabindex="-1">二、Jenkins+Maven+Gitee持续集成 <a class="header-anchor" href="#二、jenkins-maven-gitee持续集成" aria-label="Permalink to &quot;二、Jenkins+Maven+Gitee持续集成&quot;">​</a></h2><h3 id="安装maven插件" tabindex="-1">安装Maven插件 <a class="header-anchor" href="#安装maven插件" aria-label="Permalink to &quot;安装Maven插件&quot;">​</a></h3><p>1、登录Jenkins，进入插件管理</p><p><img src="`+p+'" alt="image-20230319172755855"></p><p>搜索maven</p><p><img src="'+l+'" alt="image-20230319185947771"></p><p>等安装好，返回首页</p><p><img src="'+o+'" alt="image-20230319190147058"></p><h3 id="构建项目" tabindex="-1">构建项目 <a class="header-anchor" href="#构建项目" aria-label="Permalink to &quot;构建项目&quot;">​</a></h3><p>点击New Item</p><p><img src="'+i+'" alt="image-20230319191314246"></p><p>创建名称，选择maven项目，并保存</p><p><img src="'+t+'" alt="image-20230319191507250"></p><h3 id="配置gitee" tabindex="-1">配置gitee <a class="header-anchor" href="#配置gitee" aria-label="Permalink to &quot;配置gitee&quot;">​</a></h3><p>1、Jenkins安装git插件，和maven插件类似，略。</p><p>2、重新配置项目的git</p><p><img src="'+c+'" alt="image-20230319192334414"></p><h3 id="配置maven" tabindex="-1">配置maven <a class="header-anchor" href="#配置maven" aria-label="Permalink to &quot;配置maven&quot;">​</a></h3><p>构建项目里面可以跳转，也可以直接进入配置</p><p><img src="'+r+'" alt="image-20230319192828298"></p><p>输入Linux上maven安装地址（不要自动安装）</p><p><img src="'+d+'" alt="image-20230319193702490"></p><h3 id="配置项目pom地址" tabindex="-1">配置项目pom地址 <a class="header-anchor" href="#配置项目pom地址" aria-label="Permalink to &quot;配置项目pom地址&quot;">​</a></h3><p>从gitee找到pom地址，在item中配置pom地址</p><p><img src="'+g+'" alt="image-20230319193510089"></p><p>启动项目，此时会把项目放到jenkins默认地址<code>/root/.jenkins/workspace/my-first-test</code></p><h3 id="配置项目部署地址" tabindex="-1">配置项目部署地址 <a class="header-anchor" href="#配置项目部署地址" aria-label="Permalink to &quot;配置项目部署地址&quot;">​</a></h3><p>1、Jenkins安装publish over ssh插件，略。</p><p>2、进入配置</p><p><img src="'+h+'" alt="image-20230319204258848"></p><p>输入IP地址和密码</p><p><img src="'+u+'" alt="image-20230319204752520"></p><p>3、在构建项目中添加</p><p><img src="'+m+'" alt="image-20230319205142239"></p><p>配置jar和启动命令。图中启动命令是错的，应该是</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">nohup java -jar /xxx/xxx.jar &gt; mylog.log 2&gt;&amp;1 &amp;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">nohup java -jar /xxx/xxx.jar &gt; mylog.log 2&gt;&amp;1 &amp;</span></span></code></pre></div><p><img src="'+y+`" alt="image-20230319210546979"></p><p>启动项目</p><h2 id="三、构建-其他配置" tabindex="-1">三、构建-其他配置 <a class="header-anchor" href="#三、构建-其他配置" aria-label="Permalink to &quot;三、构建-其他配置&quot;">​</a></h2><h3 id="配置项目前启动脚本" tabindex="-1">配置项目前启动脚本 <a class="header-anchor" href="#配置项目前启动脚本" aria-label="Permalink to &quot;配置项目前启动脚本&quot;">​</a></h3><p>每次构建项目前，先kill项目、删除服务器项目文件。</p><p>在Linux服务器，编写删除脚本</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">#! /bin/bash</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">#删除历史数据</span></span>
<span class="line"><span style="color:#e1e4e8;">rm -rf target</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">appname=$1</span></span>
<span class="line"><span style="color:#e1e4e8;">#获取传入的参数</span></span>
<span class="line"><span style="color:#e1e4e8;">echo &quot;arg:$1&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">#获取正在运行的jar包pid</span></span>
<span class="line"><span style="color:#e1e4e8;">pid=\`ps -ef | grep $1 | grep &#39;java -jar&#39; | awk &#39;{printf $2}&#39;\`</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">echo $pid</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">#如果pid为空，提示一下，否则，执行kill命令</span></span>
<span class="line"><span style="color:#e1e4e8;">if [ -z $pid ];</span></span>
<span class="line"><span style="color:#e1e4e8;">#使用-z 做空值判断</span></span>
<span class="line"><span style="color:#e1e4e8;">        then</span></span>
<span class="line"><span style="color:#e1e4e8;">                echo &quot;$appname not started&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">        else</span></span>
<span class="line"><span style="color:#e1e4e8;">				kill -9 $pid</span></span>
<span class="line"><span style="color:#e1e4e8;">                echo &quot;$appname stoping....&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">check=\`ps -ef | grep -w $pid | grep java\`</span></span>
<span class="line"><span style="color:#e1e4e8;">if [ -z $check ];</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">        then</span></span>
<span class="line"><span style="color:#e1e4e8;">                echo &quot;$appname pid:$pid is stop&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">        else</span></span>
<span class="line"><span style="color:#e1e4e8;">                echo &quot;$appname stop failed&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">fi</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">fi</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">#! /bin/bash</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">#删除历史数据</span></span>
<span class="line"><span style="color:#24292e;">rm -rf target</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">appname=$1</span></span>
<span class="line"><span style="color:#24292e;">#获取传入的参数</span></span>
<span class="line"><span style="color:#24292e;">echo &quot;arg:$1&quot;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">#获取正在运行的jar包pid</span></span>
<span class="line"><span style="color:#24292e;">pid=\`ps -ef | grep $1 | grep &#39;java -jar&#39; | awk &#39;{printf $2}&#39;\`</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">echo $pid</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">#如果pid为空，提示一下，否则，执行kill命令</span></span>
<span class="line"><span style="color:#24292e;">if [ -z $pid ];</span></span>
<span class="line"><span style="color:#24292e;">#使用-z 做空值判断</span></span>
<span class="line"><span style="color:#24292e;">        then</span></span>
<span class="line"><span style="color:#24292e;">                echo &quot;$appname not started&quot;</span></span>
<span class="line"><span style="color:#24292e;">        else</span></span>
<span class="line"><span style="color:#24292e;">				kill -9 $pid</span></span>
<span class="line"><span style="color:#24292e;">                echo &quot;$appname stoping....&quot;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">check=\`ps -ef | grep -w $pid | grep java\`</span></span>
<span class="line"><span style="color:#24292e;">if [ -z $check ];</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">        then</span></span>
<span class="line"><span style="color:#24292e;">                echo &quot;$appname pid:$pid is stop&quot;</span></span>
<span class="line"><span style="color:#24292e;">        else</span></span>
<span class="line"><span style="color:#24292e;">                echo &quot;$appname stop failed&quot;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">fi</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">fi</span></span></code></pre></div><p>在Jenkins配置</p><p><img src="`+k+'" alt="image-20230319221146529"></p><h3 id="自动构建方式" tabindex="-1">自动构建方式 <a class="header-anchor" href="#自动构建方式" aria-label="Permalink to &quot;自动构建方式&quot;">​</a></h3><ul><li>快照依赖构建/Build whenever a SNAPSHOT dependency is built <ul><li>当依赖的快照被构建时执行本job</li></ul></li><li>触发远程构建 (例如,使用脚本) <ul><li>远程调用本job的restapi时执行本job</li></ul></li><li>job依赖构建/Build after other projects are built <ul><li>当依赖的job被构建时执行本job</li></ul></li><li>定时构建/Build periodically <ul><li>使用cron表达式定时构建本job</li></ul></li><li>向GitHub提交代码时触发Jenkins自动构建/GitHub hook trigger for GITScm polling <ul><li>Github-WebHook出发时构建本job</li></ul></li><li>定期检查代码变更/Poll SCM <ul><li>使用cron表达式定时检查代码变更，变更后构建本job</li></ul></li></ul><h3 id="自动构建-提交代码时触发" tabindex="-1">自动构建-提交代码时触发 <a class="header-anchor" href="#自动构建-提交代码时触发" aria-label="Permalink to &quot;自动构建-提交代码时触发&quot;">​</a></h3><p>1、先安装Jenkins免密登录插件 Build Authorization Token Root</p><p>2、配置构建</p><p><img src="'+b+'" alt="image-20230319224651661"></p><p>3、 在gitee中配置，这里不行，因为是内网URL，如果是公网IP就可以了</p><p><img src="'+v+`" alt="image-20230319225958981"></p><h2 id="四、部署到docker" tabindex="-1">四、部署到Docker <a class="header-anchor" href="#四、部署到docker" aria-label="Permalink to &quot;四、部署到Docker&quot;">​</a></h2><h3 id="三种部署方式" tabindex="-1">三种部署方式 <a class="header-anchor" href="#三种部署方式" aria-label="Permalink to &quot;三种部署方式&quot;">​</a></h3><ul><li>Jenkens：jar包放到Linux目录；Docker：外挂Linux目录&amp;运行镜像。</li><li>Jenkens：用Dockerfile构建镜像；Docker：直接运行镜像。</li><li>Jenkens：用Dockerfile构建镜像；上传到Harbor私服；k8s集群拉取镜像并运行。</li></ul><h3 id="方式1-docker外挂目录" tabindex="-1">方式1：Docker外挂目录 <a class="header-anchor" href="#方式1-docker外挂目录" aria-label="Permalink to &quot;方式1：Docker外挂目录&quot;">​</a></h3><p>1、初始化容器</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">docker run -d -p 8888:8888 --name SpringBootTest -v /root/jenkins/target/SpringBootTest-1-0.0.1-SNAPSHOT.jar:/app.jar openjdk:11 java -jar app.jar</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">docker run -d -p 8888:8888 --name SpringBootTest -v /root/jenkins/target/SpringBootTest-1-0.0.1-SNAPSHOT.jar:/app.jar openjdk:11 java -jar app.jar</span></span></code></pre></div><p>2、Jenkins构建前，停止容器</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">docker stop SpringBootTest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">docker stop SpringBootTest</span></span></code></pre></div><p>3、Jenkins构建后，启动容器</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">docker start SpringBootTest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">docker start SpringBootTest</span></span></code></pre></div><h3 id="方式2-构建docker镜像" tabindex="-1">方式2：构建Docker镜像 <a class="header-anchor" href="#方式2-构建docker镜像" aria-label="Permalink to &quot;方式2：构建Docker镜像&quot;">​</a></h3><p>1、制作DockerFile，可以放项目内一起打包，也可以放Linux服务器</p><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> openjdk:11</span></span>
<span class="line"><span style="color:#F97583;">EXPOSE</span><span style="color:#E1E4E8;"> 8888</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">WORKDIR</span><span style="color:#E1E4E8;"> /root</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">ADD</span><span style="color:#E1E4E8;"> target/SpringBootTest*.jar /root/app.jar</span></span>
<span class="line"><span style="color:#F97583;">ENTRYPOINT</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;java&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;-jar&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;/root/app.jar&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> openjdk:11</span></span>
<span class="line"><span style="color:#D73A49;">EXPOSE</span><span style="color:#24292E;"> 8888</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">WORKDIR</span><span style="color:#24292E;"> /root</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">ADD</span><span style="color:#24292E;"> target/SpringBootTest*.jar /root/app.jar</span></span>
<span class="line"><span style="color:#D73A49;">ENTRYPOINT</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;java&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;-jar&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;/root/app.jar&quot;</span><span style="color:#24292E;">]</span></span></code></pre></div><p>2、构建前，删除容器和镜像</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">docker stop SpringBootTest</span></span>
<span class="line"><span style="color:#e1e4e8;">docker rm SpringBootTest</span></span>
<span class="line"><span style="color:#e1e4e8;">docker rmi SpringBootTestImage:1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">docker stop SpringBootTest</span></span>
<span class="line"><span style="color:#24292e;">docker rm SpringBootTest</span></span>
<span class="line"><span style="color:#24292e;">docker rmi SpringBootTestImage:1</span></span></code></pre></div><p>3、构建后，打包镜像并运行</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">docker build -f ./xx_dockerfile -t SpringBootTestImage:1 .</span></span>
<span class="line"><span style="color:#e1e4e8;">docker run -d -p 8888:8888 --name SpringBootTest SpringBootTestImage:1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">docker build -f ./xx_dockerfile -t SpringBootTestImage:1 .</span></span>
<span class="line"><span style="color:#24292e;">docker run -d -p 8888:8888 --name SpringBootTest SpringBootTestImage:1</span></span></code></pre></div><h2 id="五、创建流水线" tabindex="-1">五、创建流水线 <a class="header-anchor" href="#五、创建流水线" aria-label="Permalink to &quot;五、创建流水线&quot;">​</a></h2><h3 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h3><p>使用流水线可以让我们的任务从ui手动操作，转换为代码化，像docker的dockerfile一样，从shell命令到配置文件，更适合大型项目，可以让团队其他开发者同时参与进来，同时也可以编辑开发Jenkinswebui不能完成的更复杂的构建逻辑，作为开发者可读性也更好。</p><p>Jenkinsfile 支持两种语法形式：</p><ul><li>Declarative pipeline – 在pipeline v2.5 之后引入，结构化方式，比较简单，容易上手。这种类似于我们在做自动化测试时所接触的关键字驱动模式，只要理解其定义好的关键词，按要求填充数据即可。入门容易，但是灵活性欠缺。</li><li>Scripted pipeline – 基于grjoovy的语法，相较于Declarative，扩展性比较高，好封装，但是有些难度，需要一定的编程工具。</li></ul><p>Declarative语法的5个必备的组成部分：</p><ul><li>pipeline：整条流水线</li><li>agent：指定执行器</li><li>stages：所有阶段</li><li>stage：某一阶段，可有多个</li><li>steps：阶段内的每一步，可执行命令</li></ul><p>Pipeline定义有两种方式：</p><ul><li>一种是Pipeline Script ，是直接把脚本内容写到脚本对话框中；</li><li>一种是 Pipeline script from SCM （Source Control Management–源代码控制管理，即从gitlab/github/git上获得pipeline脚本–JenkisFile）</li></ul><h3 id="pipeline-script" tabindex="-1">pipeline script <a class="header-anchor" href="#pipeline-script" aria-label="Permalink to &quot;pipeline script&quot;">​</a></h3><p>1、先下载pipeline和pipeline stage view插件，略。</p><p>2、创建pipeline构建任务</p><p><img src="`+f+'" alt="image-20230320222442031"></p><p>3、写脚本</p><p><img src="'+q+'" alt="image-20230320224249259"></p><p>4、执行</p><p><img src="'+_+'" alt="image-20230320230349278"></p><h3 id="pipeline-script-from-scm" tabindex="-1">pipeline script from SCM <a class="header-anchor" href="#pipeline-script-from-scm" aria-label="Permalink to &quot;pipeline script from SCM&quot;">​</a></h3><p>1、项目里面写好jenkinsfile，pull到仓库</p><p><img src="'+j+'" alt="image-20230320231239267"></p><p>2、配置Git仓库地址和jenkinsfile位置</p><p><img src="'+x+'" alt="image-20230320232050611"></p><p>3、执行</p><h3 id="插件生成jenkinsfile语法" tabindex="-1">插件生成Jenkinsfile语法 <a class="header-anchor" href="#插件生成jenkinsfile语法" aria-label="Permalink to &quot;插件生成Jenkinsfile语法&quot;">​</a></h3><p>图中有Pipeline语法，在这里可以选择插件生成命令</p><p><img src="'+P+'" alt="image-20230320232050611"></p><p>在这里配置好，然后生成命令</p><p><img src="'+E+'" alt="image-20230320235349552"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><h3 id="声明式流水线" tabindex="-1">声明式流水线 <a class="header-anchor" href="#声明式流水线" aria-label="Permalink to &quot;声明式流水线&quot;">​</a></h3><p>好处</p><ul><li>在Jweb ui中的操作</li><li>可读性比较高</li><li>支持语法检查</li></ul><p>坏处</p><ul><li>代码逻辑能力比脚本式弱，不能完成特别复杂的任务</li></ul><h3 id="脚本式流水线" tabindex="-1">脚本式流水线 <a class="header-anchor" href="#脚本式流水线" aria-label="Permalink to &quot;脚本式流水线&quot;">​</a></h3><p>好处</p><ul><li>更少的代码和弱规范要求</li><li>更灵活的自定义代码操作</li><li>不受约束，可以构建特别复杂的工作流和流水线</li></ul><p>坏处</p><ul><li>读写对编程要求比较高</li><li>比声明式流水线代码更复杂</li></ul>',139),T=[S];function $(w,J,B,D,A,M){return a(),e("div",null,T)}const I=s(C,[["render",$]]);export{F as __pageData,I as default};
