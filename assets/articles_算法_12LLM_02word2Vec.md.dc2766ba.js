import{_ as e,o as a,c as t,Q as s}from"./chunks/framework.2516552c.js";const i="/assets/640.84c1ca3d.webp",r="/assets/640-1572829481674.224cb857.webp",p="/assets/640-1572829706611.351d1c85.webp",o="/assets/640-1572829836100.0193878e.webp",d="/assets/640-1572829856020.7ea0a218.webp",n="/assets/1572829940467.f4b88eff.png",c="/assets/1572830136341.979b244f.png",x=JSON.parse('{"title":"1. skip-gram","description":"","frontmatter":{},"headers":[],"relativePath":"articles/算法/12LLM/02word2Vec.md","filePath":"articles/算法/12LLM/02word2Vec.md","lastUpdated":1698198415000}'),_={name:"articles/算法/12LLM/02word2Vec.md"},l=s('<p>有两种方式实现word2Vec，一种是CBOW模型，从一个句子里面把一个词抠掉，用这个词的上文和下文去预测被抠掉的这个词；一种是skip-gram模型，输入某个单词，要求网络预测它的上下文单词。</p><p><img src="'+i+'" alt="img"></p><h1 id="_1-skip-gram" tabindex="-1">1. skip-gram <a class="header-anchor" href="#_1-skip-gram" aria-label="Permalink to &quot;1. skip-gram&quot;">​</a></h1><p>skip-gram要点：</p><ol><li>是一个三层的神经网络</li><li>训练：输入是一个word，输出是word的周边的词</li><li>然后去掉最后一层，只保存input_layer和hidden_layer</li><li>预测：输入一个word，hidden_layer将会给出该词的embedding repesentation</li></ol><h3 id="第一步-获取训练数据" tabindex="-1">第一步，获取训练数据 <a class="header-anchor" href="#第一步-获取训练数据" aria-label="Permalink to &quot;第一步，获取训练数据&quot;">​</a></h3><p>注意：如果这个词是一个句子的开头或结尾， 忽略窗外的词。</p><p><img src="'+r+'" alt="img"></p><p>接着，对上面的词进行word2int处理，并将其转成one-hot向量</p><h3 id="第二步-训练" tabindex="-1">第二步，训练 <a class="header-anchor" href="#第二步-训练" aria-label="Permalink to &quot;第二步，训练&quot;">​</a></h3><p>输入层到隐藏层：</p><p><img src="'+p+'" alt="img"></p><p>由上图，我们可以看出，我们将Input转换成embedding_representation，并将vocab_size维度降低到embedding_dim.</p><p>隐藏层到输出层，输出层使用softmax函数预测该word周边词的概率。</p><p><img src="'+o+'" alt="img"></p><p>所以整体的过程为：</p><p><img src="'+d+'" alt="img"></p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p><img src="'+n+'" alt="1572829940467"></p><p><img src="'+c+'" alt="1572830136341"></p><p>注意：</p><p>seq2seq模型，输入处都会乘以embedding_matrix，输出都会乘以embedding_matrix^T，这两个embedding矩阵有时会共享，又是则不会。</p>',22),m=[l];function h(g,b,f,u,w,k){return a(),t("div",null,m)}const P=e(_,[["render",h]]);export{x as __pageData,P as default};
