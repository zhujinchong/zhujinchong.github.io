import{_ as s,o as e,c as a,Q as o}from"./chunks/framework.2516552c.js";const b=JSON.parse('{"title":"设置显卡","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Algorithm/22模型训练和微调/10各种包如何用.md","filePath":"articles/Algorithm/22模型训练和微调/10各种包如何用.md","lastUpdated":null}'),t={name:"articles/Algorithm/22模型训练和微调/10各种包如何用.md"},n=o(`<h1 id="设置显卡" tabindex="-1">设置显卡 <a class="header-anchor" href="#设置显卡" aria-label="Permalink to &quot;设置显卡&quot;">​</a></h1><p>一定要在文件最开头设置</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">import os</span></span>
<span class="line"><span style="color:#e1e4e8;">os.environ[&quot;CUDA_VISIBLE_DEVICES&quot;] = &quot;0&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">os.environ[&quot;CUDA_VISIBLE_DEVICES&quot;] = &quot;1,2&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">import os</span></span>
<span class="line"><span style="color:#24292e;">os.environ[&quot;CUDA_VISIBLE_DEVICES&quot;] = &quot;0&quot;</span></span>
<span class="line"><span style="color:#24292e;">os.environ[&quot;CUDA_VISIBLE_DEVICES&quot;] = &quot;1,2&quot;</span></span></code></pre></div><h1 id="tensorboard" tabindex="-1">TensorBoard <a class="header-anchor" href="#tensorboard" aria-label="Permalink to &quot;TensorBoard&quot;">​</a></h1><p>TensorBoard是TensorFlow 的开源工具套件，虽然他是TensorFlow 的一部分，但是可以独立安装，并且服务于Pytorch等其他的框架。</p><p>TensorBoard的主要功能：可视化模型；跟踪模型指标；显示非表格数据，包括图像、文本和音频等。</p><p>安装TensorBoard</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">pip install tensorboard</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">pip install tensorboard</span></span></code></pre></div><p>如何使用？</p><p>1、一般是在训练时，将TensorBoard加入到回调函数</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">model.fit(X_train, y_train, epochs=5, callbacks=[TensorBoard(log_dir=&quot;./logs&quot;)])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">model.fit(X_train, y_train, epochs=5, callbacks=[TensorBoard(log_dir=&quot;./logs&quot;)])</span></span></code></pre></div><p>2、训练过程中 或训练完成时，日志目录就会出现各种文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">events.out.tfevents.1689302233.5846c0e68303.2121.0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">events.out.tfevents.1689302233.5846c0e68303.2121.0</span></span></code></pre></div><p>3、启动TensorBoard</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">tensorboard --logdir=你创建的文件夹名字 --host 127.0.0.1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">tensorboard --logdir=你创建的文件夹名字 --host 127.0.0.1</span></span></code></pre></div><p>4、浏览器打开</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">localhost:6006</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">localhost:6006</span></span></code></pre></div><p><a href="https://github.com/shuxueslpi/chatGLM-6B-QLoRA" target="_blank" rel="noreferrer">https://github.com/shuxueslpi/chatGLM-6B-QLoRA</a><a href="https://github.com/yanqiangmiffy/InstructGLM" target="_blank" rel="noreferrer">https://github.com/yanqiangmiffy/InstructGLM</a><a href="https://github.com/beyondguo/LLM-Tuning" target="_blank" rel="noreferrer">https://github.com/beyondguo/LLM-Tuning</a><a href="https://github.com/hiyouga/ChatGLM-Efficient-Tuning/blob/main/README_zh.md" target="_blank" rel="noreferrer">https://github.com/hiyouga/ChatGLM-Efficient-Tuning/blob/main/README_zh.md</a></p><p><a href="https://github.com/Miraclemarvel55/ChatGLM-RLHF" target="_blank" rel="noreferrer">https://github.com/Miraclemarvel55/ChatGLM-RLHF</a></p>`,19),l=[n];function p(r,i,c,d,h,u){return e(),a("div",null,l)}const _=s(t,[["render",p]]);export{b as __pageData,_ as default};
