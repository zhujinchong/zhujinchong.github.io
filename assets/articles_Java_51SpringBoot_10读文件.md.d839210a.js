import{_ as e,o as s,c as a,Q as t}from"./chunks/framework.2516552c.js";const m=JSON.parse('{"title":"读文件的四种方式","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Java/51SpringBoot/10读文件.md","filePath":"articles/Java/51SpringBoot/10读文件.md","lastUpdated":null}'),p={name:"articles/Java/51SpringBoot/10读文件.md"},n=t(`<h1 id="读文件的四种方式" tabindex="-1">读文件的四种方式 <a class="header-anchor" href="#读文件的四种方式" aria-label="Permalink to &quot;读文件的四种方式&quot;">​</a></h1><p>第一种</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ClassPathResource classPathResource = new ClassPathResource(&quot;static/test/License.xml&quot;);</span></span>
<span class="line"><span style="color:#e1e4e8;">InputStream inputStream = classPathResource.getInputStream();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ClassPathResource classPathResource = new ClassPathResource(&quot;static/test/License.xml&quot;);</span></span>
<span class="line"><span style="color:#24292e;">InputStream inputStream = classPathResource.getInputStream();</span></span></code></pre></div><p>第二种</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(&quot;static/test/License.xml&quot;);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">InputStream resourceAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(&quot;static/test/License.xml&quot;);</span></span></code></pre></div><p>第三种</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">InputStream resourceAsStream = this.getClass().getResourceAsStream(&quot;static/test/License.xml&quot;);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">InputStream resourceAsStream = this.getClass().getResourceAsStream(&quot;static/test/License.xml&quot;);</span></span></code></pre></div><p>第四种</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">File file = ResourceUtils.getFile(&quot;classpath:static/test/License.xml&quot;);</span></span>
<span class="line"><span style="color:#e1e4e8;">FileInputStream fileInputStream = new FileInputStream(file);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">File file = ResourceUtils.getFile(&quot;classpath:static/test/License.xml&quot;);</span></span>
<span class="line"><span style="color:#24292e;">FileInputStream fileInputStream = new FileInputStream(file);</span></span></code></pre></div><p>前三种开发环境(IDE中)和生产环境都能用(Linux部署jar)，第四种生产环境不能用。</p><p>原因是springboot内置tomcat，打包后是一个jar，因此通过文件获取流的方式不行，因为无法直接读取jar中的文件，只能通过流的方式读取。</p><p>前三种方法都是通过类加载器读取文件流。类加载器可以读jar中的class文件，当然也可以读jar中的文件流。</p><h1 id="读properties文件" tabindex="-1">读properties文件 <a class="header-anchor" href="#读properties文件" aria-label="Permalink to &quot;读properties文件&quot;">​</a></h1><p>读取properties方式</p><p>第一种读application.properties或者default.properties中的</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">@Value(&quot;\${redis.prefix}&quot;)</span></span>
<span class="line"><span style="color:#e1e4e8;">public void setRedisPrefix(String redisPrefix) {</span></span>
<span class="line"><span style="color:#e1e4e8;"> REDIS_PREFIX = redisPrefix;</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">@Value(&quot;\${redis.prefix}&quot;)</span></span>
<span class="line"><span style="color:#24292e;">public void setRedisPrefix(String redisPrefix) {</span></span>
<span class="line"><span style="color:#24292e;"> REDIS_PREFIX = redisPrefix;</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>第二种读xxx.proerties</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Properties properties = new Properties();</span></span>
<span class="line"><span style="color:#e1e4e8;">FileInputStream inputStream = new FileInputStream(&quot;config/config.properties&quot;);</span></span>
<span class="line"><span style="color:#e1e4e8;">properties.load(inputStream);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Properties properties = new Properties();</span></span>
<span class="line"><span style="color:#24292e;">FileInputStream inputStream = new FileInputStream(&quot;config/config.properties&quot;);</span></span>
<span class="line"><span style="color:#24292e;">properties.load(inputStream);</span></span></code></pre></div>`,18),l=[n];function o(r,i,c,u,d,h){return s(),a("div",null,l)}const S=e(p,[["render",o]]);export{m as __pageData,S as default};
